cmake_minimum_required(VERSION 3.10)
set(PROJECT_NAME YoloLayerPlugin)
project(${PROJECT_NAME} VERSION 0.2.0 LANGUAGES CXX CUDA)

message(STATUS "Build Mode: ${CMAKE_BUILD_TYPE}")

find_package(CUDAToolkit REQUIRED)
find_package(TENSORRT PATHS ../cmake/modules REQUIRED)

if("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "aarch64")
    message(STATUS "ARM CPU detected")

    if(EXISTS "/sys/module/tegra_fuse/parameters/tegra_chip_id")
        execute_process(COMMAND bash -c "cat /sys/module/tegra_fuse/parameters/tegra_chip_id" OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE chipID)
        if("${chipID}" STREQUAL "33")
            message(STATUS "NVIDIA Jetson Nano or TX1 detected")
            set(computeCap 5.3)
        elseif("${chipID}" STREQUAL "24")
            message(STATUS "NVIDIA Jetson TX2 detected")
            set(computeCap 6.2)
        elseif("${chipID}" STREQUAL "25")
            message(STATUS "NVIDIA Jetson Xavier [NX] detected")
            set(computeCap 7.2)
        endif()
    elseif(EXISTS "/sys/firmware/devicetree/base/model")
        execute_process(COMMAND bash -c "cat /sys/firmware/devicetree/base/model" OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE modelID)
        if("${modelID}" STREQUAL "Jetson AGX Orin")
            message(STATUS "NVIDIA Jetson Orin detected")
            set(computeCap 8.7)
        endif()
    else()
        message(WARNING "Not a NVIDIA Jetson CPU, defaulting compute capabilites to 5.3")
        set(computeCap 5.3)
    endif()
elseif("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
    message(WARNING "x86 CPU detected - Setting compute capabilites to 7.0")
    set(computeCap 7.0)
else()
    message(ERROR "CPU architecture (${CMAKE_HOST_SYSTEM_PROCESSOR}) is neither aarch64 (arm) nor x86_64")
endif()


include(FindCUDA/select_compute_arch)
CUDA_DETECT_INSTALLED_GPUS(INSTALLED_GPU_CCS_1)
string(STRIP "${INSTALLED_GPU_CCS_1}" INSTALLED_GPU_CCS_2)
string(REPLACE " " ";" INSTALLED_GPU_CCS_3 "${INSTALLED_GPU_CCS_2}")
string(REPLACE "." "" CUDA_ARCH_LIST "${INSTALLED_GPU_CCS_3}")
SET(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
set_property(GLOBAL PROPERTY CUDA_ARCHITECTURES "${CUDA_ARCH_LIST}")

#CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS ${computeCap})
#LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})

add_library(${PROJECT_NAME} STATIC YoloLayerPlugin.cu)

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${TENSORRT_LIBRARIES})
